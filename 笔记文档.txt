认识组件化
注册组件
组件其他补充
组件数据存放
父子组件通信
父级向子级传递
子级向父级传递
插槽slot






父子组件


在前面我们看到了组件树：组件和组件之间存在层级关系；而其中一种非常重要的关系就是父子组件的关系。

<div id="app">
<parent></parent>
</div>

<!-- 子组件的模板-->
<template id="child">
    <div>子组件内容</div>
</template>

<!--Vue 的模板template 中只能由一个根元素
如下:元素都在id为root的DIV中；如果将这个div删除掉，则不符合上面的要求，就会报错！-->
<template id="parent">
    <div id="root">
    <div>父组件内容</div>
    <child></child>
    </div>
</template>

<script src="../js/vue.js"></script>
<script>
    const child = Vue.extend({
        template: "#child"
    })
    const parent = Vue.extend({
        template: "#parent",
        components:{
            'child':child
        }
    })
    const app = new Vue({
        el: "#app",
        components: {
            'parent': parent
        }
    })
</script>





我们来看通过代码如何组成的这种层级关系：

父子组件错误用法：以子标签的形式在Vue实例中使用
因为当子组件注册到父组件的components时，Vue会编译好父组件的模块
该模板的内容已经决定了父组件将要渲染的HTML（相当于父组件中已经有了子组件中的内容了）








<child-cpn></child-cpn>是只能在父组件中被识别的。
类似这种用法，<child-cpn></child-cpn>是会被浏览器忽略的。



























