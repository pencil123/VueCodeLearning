认识组件化
注册组件
组件其他补充
组件数据存放
父子组件通信
父级向子级传递
子级向父级传递
插槽slot





<h2>一、组件化开发</h2>
组件化思想是什么
如果我们将一个页面中所有的处理逻辑全部放在一起，处理起来就会变得非常复杂，而且不利于后续的管理以及扩展。
但如果，我们将一个页面拆分成一个个小的功能块，每个功能块完成属于自己这部分独立的功能，那么之后整个页面的管理和维护就变得非常容易了。

组件化是Vue.js中的重要思想
它提供了一种抽象，让我们可以开发出一个个独立可复用的小组件来构造我们的应用。
任何的应用都会被抽象成一颗组件树。

组件化思想的应用
有了组件化的思想，我们在之后的开发中就要充分的利用它。尽可能的将页面拆分成一个个小的、可复用的组件。这样让我们的代码更加方便组织和管理，并且扩展性也更强。

<h2>二、组件的使用分成三个步骤</h2>
创建组件构造器：Vue.extend()方法创建组件构造器
注册组件：调用Vue.component()方法注册组件
使用组件：在Vue实例的作用范围内使用组件。


<div id="app">
  <cpn></cpn>
  <my-cpn></my-cpn>
</div>
<!--  下面的调用不成功-->
<cpn></cpn>

<script src="../js/vue.js"></script>
<script>
  // 1.创建组件构造器
  const cpn = Vue.extend({
    template: `
      <div>
        <h2>组件标题</h2>
        <p>我是组件的内容</p>
      </div>
    `
  })

  // 2.全局注册组件
  Vue.component('cpn', my-cpn)

  const app = new Vue({
    el: '#app',
    data: {},
	//2. 局部注册组件
	components:{
		'my-cpn':cpn
	}
  })
</script>







1.Vue.extend() 创建一个组件构造器。
通常在创建组件构造器时，传入<code>template</code>属性代表我们自定义组件的模板。该模板就是在使用到组件的地方，要显示的HTML代码。
<code>data</code> 属性，用于存储该组件中的数据。注意<code> data </code>必须是一个函数；将数据通过<code> return </code>返回。
事实上，这种写法在Vue2.x的文档中几乎已经看不到了，它会直接使用下面我们会讲到的语法糖，但是在很多资料还是会提到这种方式，而且这种方式是学习后面方式的基础。


2.Vue.component() 组件构造器注册到父组件中
调用Vue.component()是将刚才的组件构造器注册为一个组件，并且给它起一个组件的标签名称。
所以需要传递两个参数：1、String ，注册组件的标签名 2、Function|Object， 组件构造器对象。

3.组件必须挂载在某个Vue实例的作用域下，否则它不会生效。


<h2>三、全局组件和局部组件</h2>
全局组件

当我们通过调用Vue.component()注册组件时，组件的注册是全局的；这意味着该组件可以在任意Vue实例下使用。

局部组件
如果我们的【组件】是在某个【Vue实例】下注册的，则此【组件】就只属于此【Vue实例】；就是一个局部组件。
Vue 实例中<code> components </code> 属性用于注册组件。


注册组件语法糖
在上面注册组件的方式，可能会有些繁琐。Vue为了简化这个过程，提供了注册的语法糖。
主要是省去了调用Vue.extend()的步骤；将组件构造器中的内容，直接封装为一个对象，传递给 component 方法的第二个参数中。










模板的分离写法
刚才，我们通过语法糖简化了Vue组件的注册过程，另外还有一个地方的写法比较麻烦，就是template模块写法。
如果我们能将其中的HTML分离出来写，然后挂载到对应的组件上，必然结构会变得非常清晰。
Vue提供了两种方案来定义HTML模块内容：
使用<script>标签
使用<template>标签







组件存放自己的数据
组件是一个单独功能模块的封装：
这个模块有属于自己的HTML模板，也应该有属性自己的数据data。
组件中的数据是保存在哪里呢？顶层的Vue实例中吗？
我们先来测试一下，组件中能不能直接访问Vue实例中的data


我们发现不能访问，而且即使可以访问，如果将所有的数据都放在Vue实例中，Vue实例就会变的非常臃肿。
结论：Vue组件应该有自己保存数据的地方。


组件自己的数据存放在哪里呢?
组件对象也有一个data属性(也可以有methods等属性，下面我们有用到)
只是这个data属性必须是一个函数
而且这个函数返回一个对象，对象内部保存着数据






为什么data在组件中必须是一个函数呢?
首先，如果不是一个函数，Vue直接就会报错。
其次，原因是在于Vue让每个组件对象都返回一个新的对象，因为如果是同一个对象的，组件在多次使用后会相互影响。






























