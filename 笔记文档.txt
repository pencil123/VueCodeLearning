认识路由
vue-router基本使用
vue-router嵌套路由
vue-router参数传递
vue-router导航守卫
keep-alive



前端路由开发的发展过程

1、后端路由阶段
早期的网站开发整个HTML页面都是由服务器来渲染的。服务器直接生成渲染好的HTML页面, 返回给客户端进行展示。

一个网站这么多页面，服务器如何处理呢?
没有页面有自己对应的URL，当URL发送到服务器, 服务器会通过正则对该URL进行匹配, 最后交给一个Controller进行处理。Controller进行各种处理, 最终生成HTML或者数据, 返回给前端。这就完成了一个IO操作（HTTP请求）。这就是后端路由。

后端路由的缺点:
整个页面的模块由后端人员来编写和维护的，HTML代码和数据以及对应的逻辑会混在一起, 编写和维护都是非常糟糕的事情。



前端路由阶段

前后端分离阶段
随着Ajax的出现, 有了前后端分离的开发模式。后端只提供API来返回数据, 前端通过Ajax获取数据, 并且可以通过JavaScript将数据渲染到页面中。
这样做最大的优点就是前后端责任的清晰, 后端专注于数据上, 前端专注于交互和可视化上。并且当移动端(iOS/Android)出现后, 后端不需要进行任何处理, 依然使用之前的一套API。


单页面富应用阶段
其实SPA（single page web application）最主要的特点就是在前后端分离的基础上加了一层前端路由；也就是前端来维护一套路由规则。

前端路由的核心是什么呢？
改变URL，但是页面不进行整体的刷新。






如何实现呢？



URL的hash
URL的hash也就是锚点(#), 本质上是改变window.location的href属性.
我们可以通过直接赋值location.hash来改变href, 但是页面不发生刷新



HTML5的history模式：pushState
history接口是HTML5新增的, 它有五种模式改变URL而不刷新页面.
history.pushState()
HTML5的history模式：replaceState
HTML5的history模式：go

补充说明：
上面只演示了三个方法
因为 history.back() 等价于 history.go(-1)
history.forward() 则等价于 history.go(1)
这三个接口等同于浏览器界面的前进后退。


认识vue-router

目前前端流行的三大框架, 都有自己的路由实现:
Angular的ngRouter
React的ReactRouter
Vue的vue-router

当然, 我们的重点是vue-router
vue-router是Vue.js官方的路由插件，它和vue.js是深度集成的，适合用于构建单页面应用。
我们可以访问其官方网站对其进行学习: https://router.vuejs.org/zh/
vue-router是基于路由和组件的
路由用于设定访问路径, 将路径和组件映射起来.
在vue-router的单页面应用中, 页面的路径的改变就是组件的切换.




安装和使用vue-router
因为我们已经学习了webpack, 后续开发中我们主要是通过工程化的方式进行开发的.
所以在后续, 我们直接使用npm来安装路由即可.
步骤一: 安装vue-router
npm install vue-router --save
步骤二: 在模块化工程中使用它(因为是一个插件, 所以可以通过Vue.use()来安装路由功能)
第一步：导入路由对象，并且调用 Vue.use(VueRouter)
第二步：创建路由实例，并且传入路由映射配置
第三步：在Vue实例中挂载创建的路由实例
使用vue-router的步骤:
第一步: 创建路由组件
第二步: 配置路由映射: 组件和路径映射关系
第三步: 使用路由: 通过<router-link>和<router-view>




